<template>
	<view class="content">
		<view class="content-pwd">
			<view class="box-title"><text class="title-text">请输入交易密码</text></view>
			<view class="box-input"><input class="input" type="password" :value="item" v-for="(item, index) in password" :key="index" disabled="true" /></view>
		</view>
		<view class="content-keyboard">
			<view class="keyboard-row">
				<text class="keyboard-col border-bottom border-right font" @click="put(1)">1</text>
				<text class="keyboard-col border-bottom border-right font" @click="put(2)">2</text>
				<text class="keyboard-col border-bottom font" @click="put(3)">3</text>
			</view>
			<view class="keyboard-row">
				<text class="keyboard-col border-bottom border-right font" @click="put(4)">4</text>
				<text class="keyboard-col border-bottom border-right font" @click="put(5)">5</text>
				<text class="keyboard-col border-bottom font" @click="put(6)">6</text>
			</view>
			<view class="keyboard-row">
				<text class="keyboard-col border-bottom border-right font" @click="put(7)">7</text>
				<text class="keyboard-col border-bottom border-right font" @click="put(8)">8</text>
				<text class="keyboard-col border-bottom font" @click="put(9)">9</text>
			</view>
			<view class="keyboard-row">
				<text class="keyboard-col bg-black"></text>
				<text class="keyboard-col font" @click="put(0)">0</text>
				<view class="keyboard-col bg-black image-wrap" @click="reset"><image class="back-image" src="../static/image/key_back.png"></image></view>
			</view>
		</view>
	</view>
</template>

<script>
export default {
	data() {
		return {
			password: ['', '', '', '', '', ''],
			current: 0
		};
	},
	computed: {
		count() {
			let num;
			this.password.forEach((item, index) => {
				if (item == '') {
					num == index;
					return;
				}
			});
			return num;
		}
	},
	methods: {
		put(number) {
			if (this.current < 6) {
				this.$set(this.password, this.current, number);
				this.current++;
				if (this.current >= 6) {
					// uni.showLoading({
					// 	mask: true,
					// 	title: '正在验证'
					// });
					uni.$emit('balancePay', this.password.join(''));
				}
			}
		},
		reset() {
			if (this.current > 0) {
				this.current--;
				this.$set(this.password, this.current, '');
			}
		}
	},
	mounted() {
		uni.hideKeyboard();
		uni.$on('clearPassword', () => {
			this.password = ['', '', '', '', '', ''];
			this.current = 0;
			uni.getCurrentSubNVue().hide('fade-out', 100);
		});
	},
	destroyed() {
		uni.$off('clearPassword');
	}
};
</script>

<style>
.content {
	width: 750rpx;
	flex: 1;
	display: flex;
	/* flex-direction: column; */
	flex-direction: row;
	align-items: center;
	justify-content: center;
}

/* 输入密码区域 */
.content-pwd {
	/* position: absolute;
	top: 455rpx;
	left: 95rpx;
	right: 95rpx;
	height: 298rpx; */
	flex: 1;
	margin-left: 95rpx;
	margin-right: 95rpx;
	padding-bottom: 70rpx;
	background-color: #ffffff;
	border-radius: 13rpx;
}
.title-text {
	height: 150rpx;
	line-height: 150rpx;
	color: #333333;
	font-size: 30rpx;
	text-align: center;
}
.box-input {
	flex-direction: row;
	margin-left: 42rpx;
}
.input {
	width: 80upx;
	height: 80upx;
	border-color: #e5e5e5;
	border-width: 1upx;
	line-height: 80upx;
	text-align: center;
}
/* 输入密码区域结束 */

.content-keyboard {
	position: absolute;
	bottom: 0;
	left: 0;
	right: 0;
	height: 440rpx;
	background-color: #ffffff;
}
.keyboard-row {
	height: 110rpx;
	flex-direction: row;
}
.keyboard-col {
	width: 250rpx;
	height: 110rpx;
	text-align: center;
	line-height: 110rpx;
}
.border-bottom {
	border-bottom-width: 1upx;
	border-bottom-color: #c0c5c9;
}
.border-right {
	border-right-width: 1upx;
	border-right-color: #c0c5c9;
}
.bg-black {
	background-color: #d5d8db;
}
.font {
	font-size: 48upx;
}
.image-wrap {
	justify-content: center;
	align-items: center;
}
.back-image {
	width: 43upx;
	height: 30upx;
}
</style>
